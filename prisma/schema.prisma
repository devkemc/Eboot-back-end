// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pessoas {
  pes_id             Int           @id @default(autoincrement())
  pes_nome           String        @db.VarChar(100)
  pes_sobrenome      String        @db.VarChar(100)
  pes_email          String        @unique @db.VarChar(100)
  pes_senha          String        @db.VarChar(255)
  pes_admin          Boolean
  pes_dataNascimento DateTime      @default(now()) @db.Date
  pes_genero         String        @db.VarChar(20)
  pes_cpf            String        @unique
  pes_tipo_fone      TiposTelefone
  pes_ddd            Int
  pes_numero         Int
  pes_isActive       Boolean
  pes_createdAt      DateTime      @default(now())
  pes_updateAt       DateTime      @updatedAt
  endereco           Enderecos[]
  cliente            Clientes?
}

model Clientes {
  pes_id   Int        @id
  pessoa   Pessoas    @relation(fields: [pes_id], references: [pes_id])
  ranking  Int
  cartao   Cartoes[]
  pedidos  Pedidos[]
  carrinho Carrinhos?
  Cupons   Cupons[]
  Trocas   Trocas[]
}

model Cartoes {
  crt_id               Int               @id @default(autoincrement())
  crt_bandeira         BandeirasCartao
  crt_numero_cartao    Float
  crt_nome_impresso    String            @db.VarChar(100)
  crt_cod_seguranca    Int
  crt_data_validade    DateTime
  cliente              Clientes?         @relation(fields: [cliente_id], references: [pes_id])
  cliente_id           Int?
  FormaPagamentoEntity FormaPagamento[]
  PagamentoCartao      PagamentoCartao[]
}

model Cupons {
  cup_id               Int              @id @default(autoincrement())
  cup_valor            Float
  cup_ativo            Boolean
  cliente_id           Int
  cliente              Clientes         @relation(fields: [cliente_id], references: [pes_id])
  cup_createdAt        DateTime         @default(now())
  cup_updateAt         DateTime         @updatedAt
  cup_data_vencimento  DateTime
  FormaPagamentoEntity FormaPagamento[]
  PagamentoCupom       PagamentoCupom[]
}

enum BandeirasCartao {
  VISA
  MASTERCARD
  ELO
}

enum TiposTelefone {
  CELULAR
  FIXO
}

model Enderecos {
  end_id              Int             @id @default(autoincrement())
  end_tipo_imovel     TiposImovel
  end_tipo_endereco   TiposEndereco
  end_tipo_logradouro TiposLogradouro
  end_logradouro      String
  end_numero          String
  end_bairro          String
  end_cep             Int
  pessoa              Pessoas         @relation(fields: [pessoa_id], references: [pes_id])
  pessoa_id           Int
  cidade              Cidades         @relation(fields: [cidade_id], references: [cid_id])
  cidade_id           Int
  pedidos             Pedidos[]
}

enum TiposImovel {
  COMERCIAL
  RESIDENCIAL
}

enum TiposEndereco {
  COBRANCA
  ENTREGA
}

enum TiposLogradouro {
  RUA
  AVENIDA
  PRACA
  ESTRADA
}

model Cidades {
  cid_id    Int         @id @default(autoincrement())
  cid_nome  String
  endereco  Enderecos[]
  estado    Estados     @relation(fields: [estado_id], references: [est_id])
  estado_id Int
}

model Estados {
  est_id   Int       @id @default(autoincrement())
  est_nome String
  cidade   Cidades[]
}

model Categorias {
  cat_id   Int        @id @default(autoincrement())
  cat_nome String
  produtos Produtos[]
}

model Produtos {
  prod_id        Int                @id @default(autoincrement())
  prod_nome      String
  prod_descricao String
  prod_url_foto1 String
  prod_url_foto2 String
  prod_url_foto3 String
  prod_preco     Float
  prod_status    Boolean
  prod_createdAt DateTime           @default(now())
  prod_updateAt  DateTime           @updatedAt
  categoria_id   Int
  categorias     Categorias         @relation(fields: [categoria_id], references: [cat_id])
  tamanhos       ProdutosTamanhos[]
  item_pedido    ItensPedido[]
  item_carrinho  ItensCarrinho[]
}

model Tamanhos {
  tam_id        Int                @id @default(autoincrement())
  tam_tamanho   Int
  produto       ProdutosTamanhos[]
  ItensCarrinho ItensCarrinho[]
}

model ProdutosTamanhos {
  quantidade Int
  produto    Produtos @relation(fields: [produto_id], references: [prod_id])
  produto_id Int
  tamanho    Tamanhos @relation(fields: [tamanho_id], references: [tam_id])
  tamanho_id Int

  @@id([produto_id, tamanho_id])
}

model Pedidos {
  ped_id                  Int                       @id @default(autoincrement())
  cliente_id              Int
  cliente                 Clientes                  @relation(fields: [cliente_id], references: [pes_id])
  item_pedido             ItensPedido[]
  ped_valor_total         Float
  ped_valor_frete_total   Float
  ped_desconto            Float
  ped_status              StatusPedidos
  ped_createdAt           DateTime                  @default(now())
  ped_updateAt            DateTime                  @updatedAt
  Pedidos_Forma_Pagamento Pedidos_Forma_Pagamento[]
  endereco_id             Int
  endereco                Enderecos                 @relation(fields: [endereco_id], references: [end_id])
}

model Pedidos_Forma_Pagamento {
  pfp_valor          Float
  forma_pagamento_id Int
  forma_Pagamento    FormaPagamento @relation(fields: [forma_pagamento_id], references: [fpag_id])
  pedido_id          Int
  pedido             Pedidos        @relation(fields: [pedido_id], references: [ped_id])

  @@id([forma_pagamento_id, pedido_id])
}

model FormaPagamento {
  fpag_id                 Int                       @id @default(autoincrement())
  cupom                   Cupons?                   @relation(fields: [cuponsCup_id], references: [cup_id])
  cartao                  Cartoes?                  @relation(fields: [cartoesCrt_id], references: [crt_id])
  cuponsCup_id            Int?
  cartoesCrt_id           Int?
  PagamentoCupom          PagamentoCupom[]
  PagamentoCartao         PagamentoCartao[]
  Pedidos_Forma_Pagamento Pedidos_Forma_Pagamento[]
}

model PagamentoCupom {
  pcu_id          Int            @id
  forma_pagamento FormaPagamento @relation(fields: [pcu_id], references: [fpag_id])
  cupom_id        Int
  cupom           Cupons         @relation(fields: [cupom_id], references: [cup_id])
}

model PagamentoCartao {
  pcu_id          Int            @id
  forma_pagamento FormaPagamento @relation(fields: [pcu_id], references: [fpag_id])
  cartao_id       Int
  cartao          Cartoes        @relation(fields: [cartao_id], references: [crt_id])
}

model ItensPedido {
  iped_id          Int              @id @default(autoincrement())
  iped_valor_frete Float
  iped_quantidade  Int
  iped_valor_total Float
  iped_status      StatusItemPedido
  iped_tamanho     Int
  produto          Produtos         @relation(fields: [produto_id], references: [prod_id])
  produto_id       Int
  pedido           Pedidos          @relation(fields: [pedido_id], references: [ped_id])
  pedido_id        Int
  Trocas           Trocas[]
}

model ItensCarrinho {
  icar_id          Int       @id @default(autoincrement())
  icar_quantidade  Int
  icar_valor_total Float
  tamanho_id       Int
  tamanho          Tamanhos  @relation(fields: [tamanho_id], references: [tam_id])
  produto          Produtos  @relation(fields: [produto_id], references: [prod_id])
  produto_id       Int
  carrinho_id      Int
  carrinho         Carrinhos @relation(fields: [carrinho_id], references: [car_id])
}

model Carrinhos {
  car_id           Int             @id @default(autoincrement())
  icar_valor_total Float           @default(0)
  item_carrinho    ItensCarrinho[]
  cliente_id       Int             @unique
  cliente          Clientes        @relation(fields: [cliente_id], references: [pes_id])
}

enum StatusPedidos {
  REALIZADO
  CANCELADO
  PAGO
  ENVIADO
  ENTREGUE
}

enum StatusItemPedido {
  DEVOLVIDO
  TROCADO
  ENTREGUE
}

enum StatusTroca {
  SOLICITADA
  AGUARDANDO_ENVIO
  RECEBIDO
  VERIFICADO
  EM_PROCESSAMENTO
  CONCLUIDA
}

model Trocas {
  tro_id         Int         @id @default(autoincrement())
  tro_motivo     String
  tro_status     StatusTroca
  cliente_id     Int
  cliente        Clientes    @relation(fields: [cliente_id], references: [pes_id])
  item_pedido_id Int
  item_pedido    ItensPedido @relation(fields: [item_pedido_id], references: [iped_id])
}
