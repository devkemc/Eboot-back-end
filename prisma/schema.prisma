// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pessoas {
  pes_id             Int           @id @default(autoincrement())
  pes_nome           String        @db.VarChar(100)
  pes_sobrenome      String        @db.VarChar(100)
  pes_email          String        @unique @db.VarChar(100)
  pes_senha          String        @db.VarChar(255)
  pes_admin          Boolean
  pes_dataNascimento DateTime      @default(now()) @db.Date
  pes_genero         String        @db.VarChar(20)
  pes_cpf            String        @unique
  pes_tipo_fone      TiposTelefone
  pes_ddd            Int
  pes_numero         Int
  pes_isActive       Boolean
  pes_createdAt      DateTime      @default(now())
  pes_updateAt       DateTime      @updatedAt
  endereco           Enderecos[]
  cliente            Clientes?
}

model Clientes {
  cli_pes_id  Int        @id
  pessoa      Pessoas    @relation(fields: [cli_pes_id], references: [pes_id])
  cli_ranking Int
  cartao      Cartoes[]
  pedidos     Pedidos[]
  carrinho    Carrinhos?
  Cupons      Cupons[]
  Trocas      Trocas[]
}

model Cartoes {
  crt_id                 Int                    @id @default(autoincrement())
  crt_bandeira           BandeirasCartao
  crt_numero_cartao      Float
  crt_nome_impresso      String                 @db.VarChar(100)
  crt_cod_seguranca      Int
  crt_data_validade      DateTime
  crt_cli_id             Int
  cliente                Clientes               @relation(fields: [crt_cli_id], references: [cli_pes_id])
  forma_pagamento_cartao FormaPagamentoCartao[]
}

model Cupons {
  cpm_id                 Int                   @id @default(autoincrement())
  cpm_valor              Float
  cpm_ativo              Boolean
  cpm_cli_id             Int
  cliente                Clientes              @relation(fields: [cpm_cli_id], references: [cli_pes_id])
  cpm_createdAt          DateTime              @default(now())
  cpm_updateAt           DateTime              @updatedAt
  cpm_data_vencimento    DateTime
  forma_pagamento_cupons FormaPagamentoCupom[]
}

enum BandeirasCartao {
  VISA
  MASTERCARD
  ELO
}

enum TiposTelefone {
  CELULAR
  FIXO
}

model Enderecos {
  end_id              Int             @id @default(autoincrement())
  end_tipo_imovel     TiposImovel
  end_tipo_endereco   TiposEndereco
  end_tipo_logradouro TiposLogradouro
  end_logradouro      String
  end_numero          String
  end_bairro          String
  end_cep             Int
  pessoa              Pessoas         @relation(fields: [end_pes_id], references: [pes_id])
  end_pes_id          Int
  cidade              Cidades         @relation(fields: [end_cid_id], references: [cid_id])
  end_cid_id          Int
  pedidos             Pedidos[]
}

enum TiposImovel {
  COMERCIAL
  RESIDENCIAL
}

enum TiposEndereco {
  COBRANCA
  ENTREGA
}

enum TiposLogradouro {
  RUA
  AVENIDA
  PRACA
  ESTRADA
}

model Cidades {
  cid_id    Int         @id @default(autoincrement())
  cid_nome  String
  endereco  Enderecos[]
  estado    Estados     @relation(fields: [estado_id], references: [est_id])
  estado_id Int
}

model Estados {
  est_id   Int       @id @default(autoincrement())
  est_nome String
  cidade   Cidades[]
}

model Categorias {
  cat_id   Int        @id @default(autoincrement())
  cat_nome String
  produtos Produtos[]
}

model Produtos {
  prd_id        Int             @id @default(autoincrement())
  prd_nome      String
  prd_descricao String
  prd_url_foto1 String
  prd_url_foto2 String
  prd_url_foto3 String
  prd_preco     Float
  prd_status    Boolean
  prd_createdAt DateTime        @default(now())
  prd_updateAt  DateTime        @updatedAt
  prd_cat_id    Int
  categorias    Categorias      @relation(fields: [prd_cat_id], references: [cat_id])
  tamanhos      Estoque[]
  item_pedido   ItensPedido[]
  item_carrinho ItensCarrinho[]
}

model Tamanhos {
  tam_id        Int             @id @default(autoincrement())
  tam_tamanho   Int
  produto       Estoque[]
  ItensCarrinho ItensCarrinho[]
}

model Estoque {
  etq_quantidade Int
  etq_prd_id     Int
  etq_tam_id     Int
  produto        Produtos @relation(fields: [etq_prd_id], references: [prd_id])
  tamanho        Tamanhos @relation(fields: [etq_tam_id], references: [tam_id])

  @@id([etq_prd_id, etq_tam_id])
}

model Pedidos {
  ped_id                 Int           @id @default(autoincrement())
  ped_cli_id             Int
  ped_valor_total_pedido Float
  ped_valor_frete_total  Float
  ped_desconto           Float
  ped_status             StatusPedidos
  ped_createdAt          DateTime      @default(now())
  ped_end_id             Int
  ped_updateAt           DateTime      @updatedAt
  endereco               Enderecos     @relation(fields: [ped_end_id], references: [end_id])
  pagamentos             Pagamentos?
  cliente                Clientes      @relation(fields: [ped_cli_id], references: [cli_pes_id])
  item_pedido            ItensPedido[]
}

model Pagamentos {
  pgt_id               Int                    @id @default(autoincrement())
  pgt_valor_total_pago Float
  pgt_pds_id           Int                    @unique
  pedidos              Pedidos                @relation(fields: [pgt_pds_id], references: [ped_id])
  FormaPagamentoCartao FormaPagamentoCartao[]
  FormaPagamentoCupom  FormaPagamentoCupom[]
}

model FormaPagamentoCartao {
  frp_id     Int        @id @default(autoincrement())
  frp_valor  Float
  frp_pgt_id Int
  pagamentos Pagamentos @relation(fields: [frp_pgt_id], references: [pgt_id])
  frp_crt_id Int
  cartoes    Cartoes    @relation(fields: [frp_crt_id], references: [crt_id])
}

model FormaPagamentoCupom {
  fpc_id     Int        @id @default(autoincrement())
  fpc_valor  Float
  fpc_cpm_id Int
  fpc_pgt_id Int
  pagamentos Pagamentos @relation(fields: [fpc_pgt_id], references: [pgt_id])
  Cupons     Cupons     @relation(fields: [fpc_cpm_id], references: [cpm_id])
}

model ItensPedido {
  ipd_id          Int              @id @default(autoincrement())
  ipd_valor_frete Float
  ipd_quantidade  Int
  ipd_valor_total Float
  ipd_status      StatusItemPedido
  ipd_tamanho     Int
  produto         Produtos         @relation(fields: [ipd_prd_id], references: [prd_id])
  ipd_prd_id      Int
  pedido          Pedidos          @relation(fields: [ipd_ped_id], references: [ped_id])
  ipd_ped_id      Int
  Trocas          Trocas[]
}

model ItensCarrinho {
  icr_id          Int       @id @default(autoincrement())
  icr_quantidade  Int
  icr_valor_total Float
  icr_tam_id      Int
  tamanho         Tamanhos  @relation(fields: [icr_tam_id], references: [tam_id])
  produto         Produtos  @relation(fields: [icr_prd_id], references: [prd_id])
  icr_prd_id      Int
  icr_car_id      Int
  carrinho        Carrinhos @relation(fields: [icr_car_id], references: [car_id])
}

model Carrinhos {
  car_id          Int             @id @default(autoincrement())
  car_valor_total Float           @default(0)
  car_cli_id      Int             @unique
  cliente         Clientes        @relation(fields: [car_cli_id], references: [cli_pes_id])
  item_carrinho   ItensCarrinho[]
}

enum StatusPedidos {
  REALIZADO
  CANCELADO
  PAGO
  ENVIADO
  ENTREGUE
}

enum StatusItemPedido {
  DEVOLVIDO
  TROCADO
  ENTREGUE
}

enum StatusTroca {
  SOLICITADA
  AGUARDANDO_ENVIO
  RECEBIDO
  VERIFICADO
  EM_PROCESSAMENTO
  CONCLUIDA
}

model Trocas {
  tro_id      Int         @id @default(autoincrement())
  tro_motivo  String
  tro_status  StatusTroca
  tro_cli_id  Int
  cliente     Clientes    @relation(fields: [tro_cli_id], references: [cli_pes_id])
  tro_ipd_id  Int
  item_pedido ItensPedido @relation(fields: [tro_ipd_id], references: [ipd_id])
}
